/* Auto-generated by genmsg_cpp for file /home/roburoc4operator/aseta_demo_workspace/roburoc4/roburoc4_controllers/msg/Trajectory.msg */
#ifndef ROBUROC4_CONTROLLERS_MESSAGE_TRAJECTORY_H
#define ROBUROC4_CONTROLLERS_MESSAGE_TRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "roburoc4_controllers/TrajectoryPoints.h"

namespace roburoc4_controllers
{
template <class ContainerAllocator>
struct Trajectory_ {
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
  : points()
  {
  }

  Trajectory_(const ContainerAllocator& _alloc)
  : points(_alloc)
  {
  }

  typedef std::vector< ::roburoc4_controllers::TrajectoryPoints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roburoc4_controllers::TrajectoryPoints_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::roburoc4_controllers::TrajectoryPoints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roburoc4_controllers::TrajectoryPoints_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::roburoc4_controllers::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roburoc4_controllers::Trajectory_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Trajectory
typedef  ::roburoc4_controllers::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::roburoc4_controllers::Trajectory> TrajectoryPtr;
typedef boost::shared_ptr< ::roburoc4_controllers::Trajectory const> TrajectoryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roburoc4_controllers::Trajectory_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roburoc4_controllers::Trajectory_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roburoc4_controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roburoc4_controllers::Trajectory_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roburoc4_controllers::Trajectory_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roburoc4_controllers::Trajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "058fdb91ec5c87ac620b2858a05d2c6f";
  }

  static const char* value(const  ::roburoc4_controllers::Trajectory_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x058fdb91ec5c87acULL;
  static const uint64_t static_value2 = 0x620b2858a05d2c6fULL;
};

template<class ContainerAllocator>
struct DataType< ::roburoc4_controllers::Trajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roburoc4_controllers/Trajectory";
  }

  static const char* value(const  ::roburoc4_controllers::Trajectory_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roburoc4_controllers::Trajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A trajectory to follow\n\
TrajectoryPoints[] points\n\
\n\
================================================================================\n\
MSG: roburoc4_controllers/TrajectoryPoints\n\
# States of the Robot\n\
geometry_msgs/Pose2D pose\n\
geometry_msgs/Twist velocity\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::roburoc4_controllers::Trajectory_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roburoc4_controllers::Trajectory_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Trajectory_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roburoc4_controllers::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roburoc4_controllers::Trajectory_<ContainerAllocator> & v) 
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roburoc4_controllers::TrajectoryPoints_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBUROC4_CONTROLLERS_MESSAGE_TRAJECTORY_H

